using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Web;
using System.ComponentModel.DataAnnotations;
using bkwdesign.web.math.extensions;

namespace bkwdesign.web.math.Models
{
    public class MathResponse
    {

        #region Private stuff

        private Nullable<long> m_userQuery;
        private long m_response;
        private string m_addr;
        private DateTime m_requestDateTime;

        #endregion

        #region ctors

        public MathResponse()
        {
            m_requestDateTime = DateTime.Now;
        }

        #endregion

        #region properties
        /// <summary>
        /// incoming request from user
        /// </summary>
        [Display(Name="Nth number"), DisplayFormat(NullDisplayText="")]
        public Nullable<long> UserQuery
        {
            get { return m_userQuery; }
            set { m_userQuery = value; }
        }

        /// <summary>
        /// response generated by desired math operation
        /// </summary>
        /// <remarks>Unfortunately, the Display annotation makes the model Fibonacci-specific.. ok for now though.</remarks>
        [Display(Name="Fibonacci")]
        public long Response
        {
            get { return m_response; }
            set { m_response = value; }
        }

        /// <summary>
        /// address where request came from
        /// </summary>
         [Display(Name = "I.P.")]
        public string RequestOrigin
        {
            get { return m_addr; }
            set { m_addr = value; }
        }

        /// <summary>
        /// Date and Time request was received / fulfilled
        /// </summary>
         [Display(Name = "Query Date")]
        public DateTime RequestDateTime
        {
            get { return m_requestDateTime; }
            set { m_requestDateTime = value; }
        }

        #endregion

        #region static methods: Create Empty / Test for Empty

        /// <summary>
        /// When new user visits site, use this to conjure up a blank model to pass to the view
        /// </summary>
        /// <returns></returns>
        public static MathResponse EmptyResponse()
        {
            return new MathResponse()
            {
                UserQuery = null,
                Response = Int64.MinValue,
                RequestOrigin = String.Empty,
                RequestDateTime = DateTime.MinValue
            };
        }

        /// <summary>
        /// Views can call this test to affect rendering of model
        /// </summary>
        /// <param name="mr"></param>
        /// <returns></returns>
        public static bool IsEmpty(MathResponse mr)
        {
            return !mr.UserQuery.HasValue && mr.Response == Int64.MinValue && String.IsNullOrEmpty(mr.RequestOrigin);
        }

        /// <summary>
        /// pass in a datatable to iterate and select recent MathResponses from
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="source"></param>
        /// <returns></returns>
        public static List<MathResponse> GetRecentQueries(int limit, ref System.Data.DataTable source)
        {
            System.Data.DataRow[] queryResult = source.Select("","RequestDateTime DESC");

            IEnumerable<MathResponse> limitedResults = queryResult.Select(m => m.ItemArray.ToMathResponse()).Take(limit);

            return limitedResults.ToList<MathResponse>();
        }
        #endregion


    }
}